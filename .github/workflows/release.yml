name: Create Release

on:
  workflow_run:
    workflows: ["Rust Build & Test CI"]
    types:
      - completed

permissions:
  contents: write # Required for committing changes (bump version)
  actions: read   # Default permission for workflows
  deployments: write # Required for creating releases

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main' }}

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Release v${{ github.run_number }}"
          body: "Automated release for version v${{ github.run_number }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-x86_64:
    name: Build x86_64 Executable
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add x86_64 Target
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Build Executable
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-gnu/release/Gilded-Sentinel-Debian
          asset_name: Gilded-Sentinel-Debian_x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-musl:
    name: Build Static MUSL Executable
    runs-on: ubuntu-latest
    needs: create-release
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install MUSL Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Add MUSL Target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Build Executable
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/Gilded-Sentinel-Debian
          asset_name: Gilded-Sentinel-Debian_x86_64-unknown-linux-musl
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-aarch64:
    name: Build aarch64 Executable
    runs-on: ubuntu-latest
    needs: create-release
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install Cross-Compilation Toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Add aarch64 Target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Build Executable
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-gnu/release/Gilded-Sentinel-Debian
          asset_name: Gilded-Sentinel-Debian_aarch64-unknown-linux-gnu
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-armv7:
    name: Build armv7 Executable
    runs-on: ubuntu-latest
    needs: create-release
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install Cross-Compilation Toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Add armv7 Target
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Build Executable
        run: cargo build --release --target armv7-unknown-linux-gnueabihf

      - name: Upload Executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/armv7-unknown-linux-gnueabihf/release/Gilded-Sentinel-Debian
          asset_name: Gilded-Sentinel-Debian_armv7-unknown-linux-gnueabihf
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: [build-x86_64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump Version
        run: |
          version=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')
          new_version=$(echo $version | awk -F. -v OFS=. '{$NF++; print}')
          sed -i "s/version = \"$version\"/version = \"$new_version\"/" Cargo.toml
          git add Cargo.toml
          git commit -m "Bump version to $new_version" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"
